pipeline {
    agent any

    environment {
        KUBECONFIG = "${env.HOME}/.kube/config"
    }

    stages {
        stage('Start Minikube') {
            steps {
                echo "🚀 Starting Minikube..."
                sh '''
                    minikube stop || true
                    minikube delete || true
                    minikube start --driver=docker --cpus=4 --memory=4096 --force
                    kubectl cluster-info
                '''
            }
        }

        stage('Create Monitoring Namespace') {
            steps {
                sh 'kubectl create namespace monitoring || echo "Namespace already exists"'
            }
        }

        stage('Apply ELK Manifests') {
            steps {
                echo "📦 Applying ELK manifest files..."
                sh '''
                    kubectl apply -f elasticsearch.yaml -n monitoring
                    kubectl apply -f kibana.yaml -n monitoring
                    kubectl apply -f filebeat.yaml -n monitoring
                    kubectl apply -f filebeat-daemonset.yaml -n monitoring
                '''
            }
        }

        stage('Wait for ELK Pods to Be Running') {
            steps {
                echo "⏳ Waiting for ELK stack pods..."
                sh '''
                    ATTEMPTS=0
                    until [ $ATTEMPTS -ge 30 ]; do
                        echo "⏱️ Check #$ATTEMPTS..."
                        RUNNING=$(kubectl get pods -n monitoring --no-headers | grep Running | wc -l)
                        TOTAL=$(kubectl get pods -n monitoring --no-headers | wc -l)
                        echo "Running: $RUNNING / $TOTAL"
                        if [ "$TOTAL" -gt 0 ] && [ "$RUNNING" -eq "$TOTAL" ]; then
                            echo "✅ All ELK pods are running"
                            break
                        fi
                        sleep 10
                        ATTEMPTS=$((ATTEMPTS+1))
                    done

                    echo "--- POD STATUS ---"
                    kubectl get pods -n monitoring
                    echo "------------------"
                '''
            }
        }

         stage('Test Elasticsearch Index') {
            steps {
                echo "📡 Testing Elasticsearch..."
                sh '''
                    sleep 120
                    nohup kubectl port-forward svc/elasticsearch-clusterip 9201:9200 -n monitoring > /dev/null 2>&1 &
                    sleep 5
                    curl -s http://localhost:9201/_cat/indices?v || echo "⚠️ Curl to Elasticsearch failed"
                '''
            }
        }

        stage('Port Forward Kibana') {
            steps {
                echo "🌐 Forwarding Kibana port (5601)..."
                sh '''
                    sleep 60
                    nohup kubectl port-forward svc/kibana 5601:5601 -n monitoring > /dev/null 2>&1 &
                    echo "🔗 Kibana UI: http://localhost:5601"
                '''
            }
        }

       
    }

    post {
        success {
            echo "✅ ELK stack is deployed and ready!"
        }
        failure {
            echo "❌ ELK stack deployment failed!"
        }
    }
}
